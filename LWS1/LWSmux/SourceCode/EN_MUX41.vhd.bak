library ieee;
use ieee.std_logic_1164.all;


entity mux41 is 
	port (
		A, B, C, D  : in std_logic;
		S0, S1 : in std_logic;
		Y : out std_logic
	);
end mux41;


architecture Structure of mux41 is
    -- component declarations
    component EN_inv_1bit
        Port ( A : in STD_LOGIC; Y : out STD_LOGIC );
    end component;

    component EN_and_2inp
        Port ( A, B : in STD_LOGIC; Y : out STD_LOGIC );
    end component;

    component EN_or_2inp
        Port ( A, B : in STD_LOGIC; Y : out STD_LOGIC );
    end component;

    -- internal signals
    signal S0n, S1n : STD_LOGIC;    -- inverted selects
    signal and0, and1, and2s, and3 : STD_LOGIC;
    signal or01, or23 : STD_LOGIC;

begin
    -- invert select bits
    U1: EN_inv_1bit port map (A => S0, Y => S0n);
    U2: EN_inv_1bit port map (A => S1, Y => S1n);

    -- I0 term: ~S1 & ~S0 & I0
    U3a: EN_and_2inp port map (A => S1n, B => S0n, Y => and0);
    U3b: EN_and_2inp port map (A => and0, B => A,  Y => and0);

    -- I1 term: ~S1 & S0 & I1
    U4a: EN_and_2inp port map (A => S1n, B => S0, Y => and1);
    U4b: EN_and_2inp port map (A => and1, B => B,  Y => and1);

    -- I2 term: S1 & ~S0 & I2
    U5a: EN_and_2inp port map (A => S1, B => S0n, Y => and2s);
    U5b: EN_and_2inp port map (A => and2s, B => C, Y => and2s);

    -- I3 term: S1 & S0 & I3
    U6a: EN_and_2inp port map (A => S1, B => S0, Y => and3);
    U6b: EN_and_2inp port map (A => and3, B => D,   Y => and3);

    -- combine results with ORs
    U7: EN_or_2inp port map (A => and0, B => and1, Y => or01);
    U8: EN_or_2inp port map (A => and2s, B => and3, Y => or23);
    U9: EN_or_2inp port map (A => or01, B => or23, Y => Y);

end Structure;