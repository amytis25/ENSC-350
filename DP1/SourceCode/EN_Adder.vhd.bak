library ieee;
use ieee.std_logic_1164.all;


entity EN_Adder is 
	generic (N: natural := 64);
	port (
		A, B  : in std_logic_vector (N-1 downto 0);
		S : in std_logic_vector (N-1 downto 0);
		Cin : in std_logic;
		Cout, Ovfl : out std_logic
	);
end EN_Adder;

architecture baseline of EN_Adder is
	signal C : std_logic_vector (N-1 downto 0);
	--signal S : std_logic_vector (N-1 downto 0);
	signal P,G : std_logic;
	
	begin
	P <= A(0) xor B(0);
	G <= A(0) and B(0);
	S(0) <= P xor Cin;
	C(0) <= G or (P and Cin);
	
	for i in 1 to N-1 generate
		P <= A(i) xor B(i);
		G <= A(i) and B(i);
		S(i) <= P xor C(i-1);
		C(i) <= G or (P and C(i-1));
	end generate;
	Ovfl <= C(N-1);
	
	
end baseline;

architecture FastRipple of EN_Adder is

	begin
		S <= A + B; 
	
	
	
end FastRipple;


